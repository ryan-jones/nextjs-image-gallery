"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectSpread"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _path = require("path");

var _url = require("url");

var _querystring = require("querystring");

var _fs = _interopRequireDefault(require("fs"));

var _http = _interopRequireWildcard(require("http"));

var _render3 = require("./render");

var _router = _interopRequireDefault(require("./router"));

var _utils = require("./utils");

var _config = _interopRequireDefault(require("./config"));

var _constants = require("../lib/constants");

var asset = _interopRequireWildcard(require("../lib/asset"));

var envConfig = _interopRequireWildcard(require("../lib/runtime-config"));

var _utils2 = require("../lib/utils");

var _package = _interopRequireDefault(require("../../package"));

/* eslint-disable import/first, no-return-await */
// We need to go up one more level since we are in the `dist` directory
var Server =
/*#__PURE__*/
function () {
  function Server() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$dir = _ref.dir,
        dir = _ref$dir === void 0 ? '.' : _ref$dir,
        _ref$dev = _ref.dev,
        dev = _ref$dev === void 0 ? false : _ref$dev,
        _ref$staticMarkup = _ref.staticMarkup,
        staticMarkup = _ref$staticMarkup === void 0 ? false : _ref$staticMarkup,
        _ref$quiet = _ref.quiet,
        quiet = _ref$quiet === void 0 ? false : _ref$quiet,
        _ref$conf = _ref.conf,
        conf = _ref$conf === void 0 ? null : _ref$conf;

    (0, _classCallCheck2.default)(this, Server);
    this.dir = (0, _path.resolve)(dir);
    this.dev = dev;
    this.quiet = quiet;
    this.router = new _router.default();
    this.http = null;
    var phase = dev ? _constants.PHASE_DEVELOPMENT_SERVER : _constants.PHASE_PRODUCTION_SERVER;
    this.nextConfig = (0, _config.default)(phase, this.dir, conf);
    this.distDir = (0, _path.join)(this.dir, this.nextConfig.distDir); // Only serverRuntimeConfig needs the default
    // publicRuntimeConfig gets it's default in client/index.js

    var _this$nextConfig = this.nextConfig,
        _this$nextConfig$serv = _this$nextConfig.serverRuntimeConfig,
        serverRuntimeConfig = _this$nextConfig$serv === void 0 ? {} : _this$nextConfig$serv,
        publicRuntimeConfig = _this$nextConfig.publicRuntimeConfig,
        assetPrefix = _this$nextConfig.assetPrefix,
        generateEtags = _this$nextConfig.generateEtags;

    if (!dev && !_fs.default.existsSync((0, _path.resolve)(this.distDir, _constants.BUILD_ID_FILE))) {
      console.error("> Could not find a valid build in the '".concat(this.distDir, "' directory! Try building your app with 'next build' before starting the server."));
      process.exit(1);
    }

    this.buildId = this.readBuildId(dev);
    this.hotReloader = dev ? this.getHotReloader(this.dir, {
      config: this.nextConfig,
      buildId: this.buildId
    }) : null;
    this.renderOpts = {
      dev: dev,
      staticMarkup: staticMarkup,
      distDir: this.distDir,
      hotReloader: this.hotReloader,
      buildId: this.buildId,
      generateEtags: generateEtags // Only the `publicRuntimeConfig` key is exposed to the client side
      // It'll be rendered as part of __NEXT_DATA__ on the client side

    };

    if (publicRuntimeConfig) {
      this.renderOpts.runtimeConfig = publicRuntimeConfig;
    } // Initialize next/config with the environment configuration


    envConfig.setConfig({
      serverRuntimeConfig: serverRuntimeConfig,
      publicRuntimeConfig: publicRuntimeConfig
    });
    this.setAssetPrefix(assetPrefix);
  }

  (0, _createClass2.default)(Server, [{
    key: "getHotReloader",
    value: function getHotReloader(dir, options) {
      var HotReloader = require('./hot-reloader').default;

      return new HotReloader(dir, options);
    }
  }, {
    key: "handleRequest",
    value: function handleRequest(req, res, parsedUrl) {
      var _this = this;

      // Parse url if parsedUrl not provided
      if (!parsedUrl || (0, _typeof2.default)(parsedUrl) !== 'object') {
        parsedUrl = (0, _url.parse)(req.url, true);
      } // Parse the querystring ourselves if the user doesn't handle querystring parsing


      if (typeof parsedUrl.query === 'string') {
        parsedUrl.query = (0, _querystring.parse)(parsedUrl.query);
      }

      res.statusCode = 200;
      return this.run(req, res, parsedUrl).catch(function (err) {
        if (!_this.quiet) console.error(err);
        res.statusCode = 500;
        res.end(_http.STATUS_CODES[500]);
      });
    }
  }, {
    key: "getRequestHandler",
    value: function getRequestHandler() {
      return this.handleRequest.bind(this);
    }
  }, {
    key: "setAssetPrefix",
    value: function setAssetPrefix(prefix) {
      this.renderOpts.assetPrefix = prefix ? prefix.replace(/\/$/, '') : '';
      asset.setAssetPrefix(this.renderOpts.assetPrefix);
    }
  }, {
    key: "prepare",
    value: function () {
      var _prepare = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.defineRoutes();

              case 2:
                if (!this.hotReloader) {
                  _context.next = 5;
                  break;
                }

                _context.next = 5;
                return this.hotReloader.start();

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function prepare() {
        return _prepare.apply(this, arguments);
      };
    }()
  }, {
    key: "close",
    value: function () {
      var _close = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2() {
        var _this2 = this;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this.hotReloader) {
                  _context2.next = 3;
                  break;
                }

                _context2.next = 3;
                return this.hotReloader.stop();

              case 3:
                if (!this.http) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 6;
                return new _promise.default(function (resolve, reject) {
                  _this2.http.close(function (err) {
                    if (err) return reject(err);
                    return resolve();
                  });
                });

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function close() {
        return _close.apply(this, arguments);
      };
    }()
  }, {
    key: "defineRoutes",
    value: function () {
      var _defineRoutes = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee9() {
        var _this3 = this;

        var routes, exportPathMap, _loop, path, _arr, _i, method, _arr2, _i2, p;

        return _regenerator.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                routes = {
                  '/_next/static/:path*': function () {
                    var _nextStaticPath2 = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee3(req, res, params) {
                      var p;
                      return _regenerator.default.wrap(function _callee3$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              // The commons folder holds commonschunk files
                              // The chunks folder holds dynamic entries
                              // The buildId folder holds pages and potentially other assets. As buildId changes per build it can be long-term cached.
                              // In development they don't have a hash, and shouldn't be cached by the browser.
                              if (params.path[0] === _constants.CLIENT_STATIC_FILES_RUNTIME || params.path[0] === 'chunks' || params.path[0] === _this3.buildId) {
                                if (_this3.dev) {
                                  res.setHeader('Cache-Control', 'no-store, must-revalidate');
                                } else {
                                  res.setHeader('Cache-Control', 'public, max-age=31536000, immutable');
                                }
                              }

                              p = _path.join.apply(void 0, [_this3.distDir, _constants.CLIENT_STATIC_FILES_PATH].concat((0, _toConsumableArray2.default)(params.path || [])));
                              _context3.next = 4;
                              return _this3.serveStatic(req, res, p);

                            case 4:
                            case "end":
                              return _context3.stop();
                          }
                        }
                      }, _callee3, this);
                    }));

                    return function _nextStaticPath(_x, _x2, _x3) {
                      return _nextStaticPath2.apply(this, arguments);
                    };
                  }(),
                  // It's very important keep this route's param optional.
                  // (but it should support as many as params, seperated by '/')
                  // Othewise this will lead to a pretty simple DOS attack.
                  // See more: https://github.com/zeit/next.js/issues/2617
                  '/static/:path*': function () {
                    var _staticPath = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee4(req, res, params) {
                      var p;
                      return _regenerator.default.wrap(function _callee4$(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              p = _path.join.apply(void 0, [_this3.dir, 'static'].concat((0, _toConsumableArray2.default)(params.path || [])));
                              _context4.next = 3;
                              return _this3.serveStatic(req, res, p);

                            case 3:
                            case "end":
                              return _context4.stop();
                          }
                        }
                      }, _callee4, this);
                    }));

                    return function staticPath(_x4, _x5, _x6) {
                      return _staticPath.apply(this, arguments);
                    };
                  }() // In development we expose all compiled files for react-error-overlay's line show feature

                };

                if (this.dev) {
                  routes['/_next/development/:path*'] =
                  /*#__PURE__*/
                  function () {
                    var _ref2 = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee5(req, res, params) {
                      var p;
                      return _regenerator.default.wrap(function _callee5$(_context5) {
                        while (1) {
                          switch (_context5.prev = _context5.next) {
                            case 0:
                              p = _path.join.apply(void 0, [_this3.distDir].concat((0, _toConsumableArray2.default)(params.path || [])));
                              console.log('page', p);
                              _context5.next = 4;
                              return _this3.serveStatic(req, res, p);

                            case 4:
                            case "end":
                              return _context5.stop();
                          }
                        }
                      }, _callee5, this);
                    }));

                    return function (_x7, _x8, _x9) {
                      return _ref2.apply(this, arguments);
                    };
                  }();
                } // This path is needed because `render()` does a check for `/_next` and the calls the routing again


                routes['/_next/:path*'] =
                /*#__PURE__*/
                function () {
                  var _ref3 = (0, _asyncToGenerator2.default)(
                  /*#__PURE__*/
                  _regenerator.default.mark(function _callee6(req, res, params, parsedUrl) {
                    return _regenerator.default.wrap(function _callee6$(_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            _context6.next = 2;
                            return _this3.render404(req, res, parsedUrl);

                          case 2:
                          case "end":
                            return _context6.stop();
                        }
                      }
                    }, _callee6, this);
                  }));

                  return function (_x10, _x11, _x12, _x13) {
                    return _ref3.apply(this, arguments);
                  };
                }(); // Makes `next export` exportPathMap work in development mode.
                // So that the user doesn't have to define a custom server reading the exportPathMap


                if (!(this.dev && this.nextConfig.exportPathMap)) {
                  _context9.next = 10;
                  break;
                }

                console.log('Defining routes from exportPathMap');
                _context9.next = 7;
                return this.nextConfig.exportPathMap({}, {
                  dev: true,
                  dir: this.dir,
                  outDir: null,
                  distDir: this.distDir,
                  buildId: this.buildId
                });

              case 7:
                exportPathMap = _context9.sent;

                _loop = function _loop(path) {
                  var _exportPathMap$path = exportPathMap[path],
                      page = _exportPathMap$path.page,
                      _exportPathMap$path$q = _exportPathMap$path.query,
                      query = _exportPathMap$path$q === void 0 ? {} : _exportPathMap$path$q;

                  routes[path] =
                  /*#__PURE__*/
                  function () {
                    var _ref4 = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee7(req, res, params, parsedUrl) {
                      var urlQuery, mergedQuery;
                      return _regenerator.default.wrap(function _callee7$(_context7) {
                        while (1) {
                          switch (_context7.prev = _context7.next) {
                            case 0:
                              urlQuery = parsedUrl.query;
                              (0, _keys.default)(urlQuery).filter(function (key) {
                                return query[key] === undefined;
                              }).forEach(function (key) {
                                return console.warn("Url defines a query parameter '".concat(key, "' that is missing in exportPathMap"));
                              });
                              mergedQuery = (0, _objectSpread2.default)({}, urlQuery, query);
                              _context7.next = 5;
                              return _this3.render(req, res, page, mergedQuery, parsedUrl);

                            case 5:
                            case "end":
                              return _context7.stop();
                          }
                        }
                      }, _callee7, this);
                    }));

                    return function (_x14, _x15, _x16, _x17) {
                      return _ref4.apply(this, arguments);
                    };
                  }();
                };

                // In development we can't give a default path mapping
                for (path in exportPathMap) {
                  _loop(path);
                }

              case 10:
                if (this.nextConfig.useFileSystemPublicRoutes) {
                  // It's very important keep this route's param optional.
                  // (but it should support as many as params, seperated by '/')
                  // Othewise this will lead to a pretty simple DOS attack.
                  // See more: https://github.com/zeit/next.js/issues/2617
                  routes['/:path*'] =
                  /*#__PURE__*/
                  function () {
                    var _ref5 = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee8(req, res, params, parsedUrl) {
                      var pathname, query;
                      return _regenerator.default.wrap(function _callee8$(_context8) {
                        while (1) {
                          switch (_context8.prev = _context8.next) {
                            case 0:
                              pathname = parsedUrl.pathname, query = parsedUrl.query;
                              _context8.next = 3;
                              return _this3.render(req, res, pathname, query, parsedUrl);

                            case 3:
                            case "end":
                              return _context8.stop();
                          }
                        }
                      }, _callee8, this);
                    }));

                    return function (_x18, _x19, _x20, _x21) {
                      return _ref5.apply(this, arguments);
                    };
                  }();
                }

                _arr = ['GET', 'HEAD'];

                for (_i = 0; _i < _arr.length; _i++) {
                  method = _arr[_i];
                  _arr2 = (0, _keys.default)(routes);

                  for (_i2 = 0; _i2 < _arr2.length; _i2++) {
                    p = _arr2[_i2];
                    this.router.add(method, p, routes[p]);
                  }
                }

              case 13:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function defineRoutes() {
        return _defineRoutes.apply(this, arguments);
      };
    }()
  }, {
    key: "start",
    value: function () {
      var _start = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee10(port, hostname) {
        var _this4 = this;

        return _regenerator.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.prepare();

              case 2:
                this.http = _http.default.createServer(this.getRequestHandler());
                _context10.next = 5;
                return new _promise.default(function (resolve, reject) {
                  // This code catches EADDRINUSE error if the port is already in use
                  _this4.http.on('error', reject);

                  _this4.http.on('listening', function () {
                    return resolve();
                  });

                  _this4.http.listen(port, hostname);
                });

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function start(_x22, _x23) {
        return _start.apply(this, arguments);
      };
    }()
  }, {
    key: "run",
    value: function () {
      var _run = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee11(req, res, parsedUrl) {
        var _ref6, finished, fn;

        return _regenerator.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                if (!this.hotReloader) {
                  _context11.next = 7;
                  break;
                }

                _context11.next = 3;
                return this.hotReloader.run(req, res, parsedUrl);

              case 3:
                _ref6 = _context11.sent;
                finished = _ref6.finished;

                if (!finished) {
                  _context11.next = 7;
                  break;
                }

                return _context11.abrupt("return");

              case 7:
                fn = this.router.match(req, res, parsedUrl);

                if (!fn) {
                  _context11.next = 12;
                  break;
                }

                _context11.next = 11;
                return fn();

              case 11:
                return _context11.abrupt("return");

              case 12:
                if (!(req.method === 'GET' || req.method === 'HEAD')) {
                  _context11.next = 17;
                  break;
                }

                _context11.next = 15;
                return this.render404(req, res, parsedUrl);

              case 15:
                _context11.next = 19;
                break;

              case 17:
                res.statusCode = 501;
                res.end(_http.STATUS_CODES[501]);

              case 19:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function run(_x24, _x25, _x26) {
        return _run.apply(this, arguments);
      };
    }()
  }, {
    key: "render",
    value: function () {
      var _render = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee12(req, res, pathname, query, parsedUrl) {
        var html;
        return _regenerator.default.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                if (!(0, _utils.isInternalUrl)(req.url)) {
                  _context12.next = 2;
                  break;
                }

                return _context12.abrupt("return", this.handleRequest(req, res, parsedUrl));

              case 2:
                if (!(_constants.BLOCKED_PAGES.indexOf(pathname) !== -1)) {
                  _context12.next = 6;
                  break;
                }

                _context12.next = 5;
                return this.render404(req, res, parsedUrl);

              case 5:
                return _context12.abrupt("return", _context12.sent);

              case 6:
                _context12.next = 8;
                return this.renderToHTML(req, res, pathname, query);

              case 8:
                html = _context12.sent;

                if (!(0, _utils2.isResSent)(res)) {
                  _context12.next = 11;
                  break;
                }

                return _context12.abrupt("return");

              case 11:
                if (this.nextConfig.poweredByHeader) {
                  res.setHeader('X-Powered-By', "Next.js ".concat(_package.default.version));
                }

                return _context12.abrupt("return", (0, _render3.sendHTML)(req, res, html, req.method, this.renderOpts));

              case 13:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function render(_x27, _x28, _x29, _x30, _x31) {
        return _render.apply(this, arguments);
      };
    }()
  }, {
    key: "renderToHTML",
    value: function () {
      var _renderToHTML2 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee13(req, res, pathname, query) {
        var compilationErr, out;
        return _regenerator.default.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                if (!this.dev) {
                  _context13.next = 7;
                  break;
                }

                _context13.next = 3;
                return this.getCompilationError(pathname);

              case 3:
                compilationErr = _context13.sent;

                if (!compilationErr) {
                  _context13.next = 7;
                  break;
                }

                res.statusCode = 500;
                return _context13.abrupt("return", this.renderErrorToHTML(compilationErr, req, res, pathname, query));

              case 7:
                _context13.prev = 7;
                _context13.next = 10;
                return (0, _render3.renderToHTML)(req, res, pathname, query, this.renderOpts);

              case 10:
                out = _context13.sent;
                return _context13.abrupt("return", out);

              case 14:
                _context13.prev = 14;
                _context13.t0 = _context13["catch"](7);

                if (!(_context13.t0.code === 'ENOENT')) {
                  _context13.next = 21;
                  break;
                }

                res.statusCode = 404;
                return _context13.abrupt("return", this.renderErrorToHTML(null, req, res, pathname, query));

              case 21:
                if (!this.quiet) console.error(_context13.t0);
                res.statusCode = 500;
                return _context13.abrupt("return", this.renderErrorToHTML(_context13.t0, req, res, pathname, query));

              case 24:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this, [[7, 14]]);
      }));

      return function renderToHTML(_x32, _x33, _x34, _x35) {
        return _renderToHTML2.apply(this, arguments);
      };
    }()
  }, {
    key: "renderError",
    value: function () {
      var _renderError = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee14(err, req, res, pathname, query) {
        var html;
        return _regenerator.default.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this.renderErrorToHTML(err, req, res, pathname, query);

              case 2:
                html = _context14.sent;
                return _context14.abrupt("return", (0, _render3.sendHTML)(req, res, html, req.method, this.renderOpts));

              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function renderError(_x36, _x37, _x38, _x39, _x40) {
        return _renderError.apply(this, arguments);
      };
    }()
  }, {
    key: "renderErrorToHTML",
    value: function () {
      var _renderErrorToHTML2 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee15(err, req, res, pathname, query) {
        var compilationErr;
        return _regenerator.default.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                if (!this.dev) {
                  _context15.next = 7;
                  break;
                }

                _context15.next = 3;
                return this.getCompilationError(pathname);

              case 3:
                compilationErr = _context15.sent;

                if (!compilationErr) {
                  _context15.next = 7;
                  break;
                }

                res.statusCode = 500;
                return _context15.abrupt("return", (0, _render3.renderErrorToHTML)(compilationErr, req, res, pathname, query, this.renderOpts));

              case 7:
                _context15.prev = 7;
                _context15.next = 10;
                return (0, _render3.renderErrorToHTML)(err, req, res, pathname, query, this.renderOpts);

              case 10:
                return _context15.abrupt("return", _context15.sent);

              case 13:
                _context15.prev = 13;
                _context15.t0 = _context15["catch"](7);

                if (!this.dev) {
                  _context15.next = 21;
                  break;
                }

                if (!this.quiet) console.error(_context15.t0);
                res.statusCode = 500;
                return _context15.abrupt("return", (0, _render3.renderErrorToHTML)(_context15.t0, req, res, pathname, query, this.renderOpts));

              case 21:
                throw _context15.t0;

              case 22:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this, [[7, 13]]);
      }));

      return function renderErrorToHTML(_x41, _x42, _x43, _x44, _x45) {
        return _renderErrorToHTML2.apply(this, arguments);
      };
    }()
  }, {
    key: "render404",
    value: function () {
      var _render2 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee16(req, res) {
        var parsedUrl,
            pathname,
            query,
            _args16 = arguments;
        return _regenerator.default.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                parsedUrl = _args16.length > 2 && _args16[2] !== undefined ? _args16[2] : (0, _url.parse)(req.url, true);
                pathname = parsedUrl.pathname, query = parsedUrl.query;
                res.statusCode = 404;
                res.setHeader('Cache-Control', 'no-cache, no-store, max-age=0, must-revalidate');
                return _context16.abrupt("return", this.renderError(null, req, res, pathname, query));

              case 5:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function render404(_x46, _x47) {
        return _render2.apply(this, arguments);
      };
    }()
  }, {
    key: "serveStatic",
    value: function () {
      var _serveStatic2 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee17(req, res, path) {
        return _regenerator.default.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                if (this.isServeableUrl(path)) {
                  _context17.next = 2;
                  break;
                }

                return _context17.abrupt("return", this.render404(req, res));

              case 2:
                _context17.prev = 2;
                _context17.next = 5;
                return (0, _render3.serveStatic)(req, res, path);

              case 5:
                return _context17.abrupt("return", _context17.sent);

              case 8:
                _context17.prev = 8;
                _context17.t0 = _context17["catch"](2);

                if (!(_context17.t0.code === 'ENOENT')) {
                  _context17.next = 14;
                  break;
                }

                this.render404(req, res);
                _context17.next = 15;
                break;

              case 14:
                throw _context17.t0;

              case 15:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this, [[2, 8]]);
      }));

      return function serveStatic(_x48, _x49, _x50) {
        return _serveStatic2.apply(this, arguments);
      };
    }()
  }, {
    key: "isServeableUrl",
    value: function isServeableUrl(path) {
      var resolved = (0, _path.resolve)(path);

      if (resolved.indexOf((0, _path.join)(this.distDir) + _path.sep) !== 0 && resolved.indexOf((0, _path.join)(this.dir, 'static') + _path.sep) !== 0) {
        // Seems like the user is trying to traverse the filesystem.
        return false;
      }

      return true;
    }
  }, {
    key: "readBuildId",
    value: function readBuildId(dev) {
      if (dev) {
        return 'development';
      }

      var buildIdPath = (0, _path.join)(this.distDir, _constants.BUILD_ID_FILE);

      var buildId = _fs.default.readFileSync(buildIdPath, 'utf8');

      return buildId.trim();
    }
  }, {
    key: "getCompilationError",
    value: function () {
      var _getCompilationError = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee18(page) {
        var errors;
        return _regenerator.default.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                if (this.hotReloader) {
                  _context18.next = 2;
                  break;
                }

                return _context18.abrupt("return");

              case 2:
                _context18.next = 4;
                return this.hotReloader.getCompilationErrors(page);

              case 4:
                errors = _context18.sent;

                if (!(errors.length === 0)) {
                  _context18.next = 7;
                  break;
                }

                return _context18.abrupt("return");

              case 7:
                return _context18.abrupt("return", errors[0]);

              case 8:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function getCompilationError(_x51) {
        return _getCompilationError.apply(this, arguments);
      };
    }()
  }]);
  return Server;
}();

exports.default = Server;